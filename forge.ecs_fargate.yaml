---
AWSTemplateFormatVersion: 2010-09-09
Description: Atlassian CloudFormation Forge
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Forge setup
        Parameters:
          - ForgeVersion
          - ForgeFlaskSecretKey
          - SamlMetadataUrl
          - GoogleAnalyticsUA
          - ConfigurationLambdaArn
      - Label:
          default: Networking
        Parameters:
          - CidrBlock
          - ExternalSubnets
          - InternalSubnets
          - LoadBalancerScheme
          - SSLCertificateArn
          - VPC
      - Label:
          default: DNS (Optional)
        Parameters:
          - CustomDnsName
          - HostedZone
          - SubDomainName
      - Label:
          default: Advanced (Optional)
        Parameters:
          - ForgeRegistryUrl
          - ForgeImageName
          - CpuUnits
          - MemoryUnits
    ParameterLabels:
      CpuUnits:
        default: ECS CPU units
      CidrBlock:
        default: Permitted IP range
      ConfigurationLambdaArn:
        default: Configuration Updater Lambda ARN
      CustomDnsName:
        default: Existing DNS name (optional)
      ExternalSubnets:
        default: External subnets *
      ForgeFlaskSecretKey:
        default: Flask app secret key
      ForgeImageName:
        default: Forge image name
      ForgeRegistryUrl:
        default: Forge registry URL
      ForgeVersion:
        default: Version *
      GoogleAnalyticsUA:
        default: Google Analytics UA
      HostedZone:
        default: R53 Hosted Zone (optional)
      InternalSubnets:
        default: Internal subnets *
      LoadBalancerScheme:
        default: Load Balancer Scheme
      MemoryUnits:
        default: ECS Memory units
      SamlMetadataUrl:
        default: SAML Metadata URL
      SSLCertificateArn:
        default: SSL Certificate ARN
      SubDomainName:
        default: Sub-domain for Hosted Zone (optional)
      VPC:
        default: VPC *
Parameters:
  CpuUnits:
    Default: 256
    Description: The number of CPU units dedicated to the Forge ECS container; must be a valid ECS Fargate CPU size
    MinValue: 256
    MaxValue: 4096
    Type: Number
  CidrBlock:
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})\/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
    Description: The CIDR IP range that is permitted to access Forge; use 0.0.0.0/0 if you want public access from the internet
    MinLength: 9
    MaxLength: 18
    Type: String
  ConfigurationLambdaArn:
    Description: The ARN of the Lambda created for auto-updating Forge's configuration
    Type: String
  CustomDnsName:
    Description: 'Use custom existing DNS name for your Forge instance; please note: you must own the domain and configure it to point at the load balancer'
    Type: String
  ExternalSubnets:
    Description: Subnets (two or more) where your user-facing load balancer will be deployed; MUST be within the selected VPC
    Type: List<AWS::EC2::Subnet::Id>
  ForgeFlaskSecretKey:
    Description: The secret key used to encrypt Forge session parameters
    MinLength: 1
    NoEcho: True
    Type: String
  ForgeImageName:
    Description: This parameter is used to specify a custom Forge image for testing purposes; leave this parameter blank to use the official image (atlassian/atl-cfn-forge)
    Type: String
  ForgeRegistryUrl:
    Description: This parameter is used to specify a custom Forge registry for testing purposes; leave this parameter blank to use Docker Hub images
    Type: String
  ForgeVersion:
    Default: 'latest'
    AllowedPattern: '^(\d+\.\d+\.\d+(-?.*))|latest$'
    ConstraintDescription: Must be a valid tag or "latest"
    Description: The version tag of Forge to install; find valid tags at https://hub.docker.com/r/atlassian/atl-cfn-forge
    Type: String
  GoogleAnalyticsUA:
    Description: Provide a Google Analytics tracking ID (UA number) to enable collection of Forge usage statistics within your org
    Type: String
  HostedZone:
    Description: The domain name of the Route53 PRIVATE Hosted Zone in which to create cnames
    Type: String
  InternalSubnets:
    Description: Subnets (two or more) where your cluster nodes and other internal infrastructure will be deployed; MUST be within the selected VPC; specify the ExternalSubnets again here if you wish to deploy the whole stack into the same subnets
    Type: List<AWS::EC2::Subnet::Id>
  LoadBalancerScheme:
    Default: internal
    AllowedValues:
      - internet-facing
      - internal
    Description: Controls if the load balancer is assigned a public IP address
    Type: String
  MemoryUnits:
    Default: 512
    Description: The amount of memory dedicated to the Forge ECS container; must be a valid ECS Fargate memory size for your selected CPU units
    MinValue: 512
    MaxValue: 30720
    Type: Number
  SamlMetadataUrl:
    Description: The URL for your SSO's SAML metadata provider; enter a value to enable SAML auth, leave blank to disable
    Type: String
  SSLCertificateArn:
    Description: Amazon Resource Name (ARN) of your SSL certificate. If you want to use your own certificate that you generated outside of Amazon, you need to first import it to AWS Certificate Manager. After a successful import, you'll receive the ARN. If you want to create a certificate with AWS Certificate Manager (ACM certificate), you will receive the ARN after it's successfully created
    MinLength: 0
    MaxLength: 50
    Type: String
  SubDomainName:
    Description: Leave this field blank to use your stack name as the sub-domain
    Type: String
  VPC:
    Description: Virtual Private Cloud
    Type: AWS::EC2::VPC::Id
Conditions:
  DoSSL:
    !Not [!Equals [!Ref SSLCertificateArn, '']]
  UseConfigUpdaterLambda:
    !Not [!Equals [!Ref ConfigurationLambdaArn, '']]
  UseCustomDnsName:
    !Not [!Equals [!Ref CustomDnsName, '']]
  UseCustomImage:
    !Not [!Equals [!Ref ForgeImageName, '']]
  UseCustomRegistry:
    !Not [!Equals [!Ref ForgeRegistryUrl, '']]
  UseHostedZone:
    !Not [!Equals [!Ref HostedZone, '']]
  UseSamlAuth:
    !Not [!Equals [!Ref SamlMetadataUrl, '']]
  UseSubDomainName:
    !Not [!Equals [!Ref SubDomainName, '']]
Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
  Service:
    Type: AWS::ECS::Service
    DependsOn:
      - LoadBalancer
    Properties:
      Cluster: !Ref ECSCluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: forge
          ContainerPort: 8000
          TargetGroupArn: !Ref TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups: [!Ref SecurityGroup]
          Subnets: !Ref InternalSubnets
      ServiceName: !Sub '${AWS::StackName}-atl-cfn-forge'
      TaskDefinition: !Ref TaskDefinition
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub '${AWS::StackName}-atl-cfn-forge-task'
      Cpu: !Ref CpuUnits
      Memory: !Ref MemoryUnits
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Sub 'arn:aws:iam::${AWS::AccountId}:role/ecsTaskExecutionRole'
      TaskRoleArn: !GetAtt TaskRole.Arn
      ContainerDefinitions:
        - Name: forge
          Command: !If [UseSamlAuth, ['--saml'], !Ref 'AWS::NoValue']
          Environment:
            - Name: ATL_FORGE_ANALYTICS_UA
              Value: !Ref GoogleAnalyticsUA
            - Name: ATL_FORGE_FLASK_SECRET
              Value: !Ref ForgeFlaskSecretKey
            - Name: ATL_FORGE_S3_DIAGNOSTICS
              Value: !Ref DiagnosticsBucket
            - Name: ATL_FORGE_S3_TEMPLATES
              Value: !Ref TemplatesBucket
            - Name: ATL_FORGE_S3_STACKLOGS
              Value: !Ref StackLogsBucket
            - Name: ATL_FORGE_S3_CONFIG
              Value: !Ref ConfigBucket
            - Name: ATL_FORGE_SAML_METADATA_URL
              Value: !Ref SamlMetadataUrl
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref AWS::StackName
          Image: !Sub
            - "${RegistryUrl}${ImageName}:${Version}"
            - RegistryUrl: !If [UseCustomRegistry, !Sub "${ForgeRegistryUrl}/", !Ref 'AWS::NoValue']
              ImageName: !If [UseCustomImage, !Ref ForgeImageName, 'atlassian/atl-cfn-forge']
              Version: !Ref ForgeVersion
          PortMappings:
            - ContainerPort: 8000
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: 300
      Scheme: !Ref LoadBalancerScheme
      SecurityGroups: [!Ref SecurityGroup]
      Subnets: !Ref ExternalSubnets
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: !If [DoSSL, !Ref SSLCertificateArn, !Ref 'AWS::NoValue']
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: !If [DoSSL, 443, 80]
      Protocol: !If [DoSSL, HTTPS, HTTP]
  LoadBalancerCname:
    Condition: UseHostedZone
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Ref HostedZone
      Comment: Route53 cname for the ALB
      Name: !Sub
        - "${SubDomainName}.${HostedZone}"
        - SubDomainName: !If [UseSubDomainName, !Ref SubDomainName, !Ref 'AWS::StackName']
          HostedZone: !Ref 'HostedZone'
      Type: CNAME
      TTL: 900
      ResourceRecords:
        - !GetAtt LoadBalancer.DNSName
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn:
      - LoadBalancer
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: '/status'
      HealthCheckPort: 8000
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200
      Name: !Join ['-', [!Ref 'AWS::StackName', !Select [2, !Split ['-', !GetAtt LoadBalancer.LoadBalancerName]]]]
      Port: 8000
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: true
        - Key: stickiness.type
          Value: lb_cookie
      TargetType: ip
      VpcId: !Ref VPC
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group allowing HTTP/HTTPS access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref CidrBlock
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref CidrBlock
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} sg"
      VpcId: !Ref VPC
  SecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: -1
      FromPort: -1
      ToPort: -1
      SourceSecurityGroupId: !Ref SecurityGroup
  ConfigBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-atl-forge-config-${AWS::AccountId}'
      LoggingConfiguration:
        DestinationBucketName: !Sub 'atl-default-s3-logging-${AWS::AccountId}-${AWS::Region}'
        LogFilePrefix: ${AWS::StackName}-atl-forge-config/
      NotificationConfiguration:
        !If
          - UseConfigUpdaterLambda
          - LambdaConfigurations:
            - Event: 's3:ObjectCreated:*'
              Function: !Ref ConfigurationLambdaArn
          - !Ref AWS::NoValue
  DiagnosticsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-atl-forge-diagnostics-${AWS::AccountId}'
      LoggingConfiguration:
        DestinationBucketName: !Sub 'atl-default-s3-logging-${AWS::AccountId}-${AWS::Region}'
        LogFilePrefix: ${AWS::StackName}-atl-forge-diagnostics/
  TemplatesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-atl-forge-templates-${AWS::AccountId}'
      LoggingConfiguration:
        DestinationBucketName: !Sub 'atl-default-s3-logging-${AWS::AccountId}-${AWS::Region}'
        LogFilePrefix: ${AWS::StackName}-atl-forge-templates/
  StackLogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-atl-forge-stacklogs-${AWS::AccountId}'
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 90
            Status: Enabled
      LoggingConfiguration:
        DestinationBucketName: !Sub 'atl-default-s3-logging-${AWS::AccountId}-${AWS::Region}'
        LogFilePrefix: ${AWS::StackName}-atl-forge-stacklogs/
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "${AWS::StackName}-atl-cfn-forge"
      RetentionInDays: 14
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ["sts:AssumeRole"]
      ManagedPolicyArns:
        - arn:aws:iam::515798882395:policy/osquery
        - arn:aws:iam::515798882395:policy/CfnStackR53NodesSelfupdater
      Path: /
      Policies:
        - PolicyName: ForgePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - cloudformation:*
                  - cloudwatch:*
                  - ec2:*
                  - elasticfilesystem:*
                  - elasticloadbalancing:*
                  - iam:AddRoleToInstanceProfile
                  - iam:AttachRolePolicy
                  - iam:CreateInstanceProfile
                  - iam:CreateRole
                  - iam:DeleteInstanceProfile
                  - iam:DeleteRole
                  - iam:DeleteRolePolicy
                  - iam:DetachRolePolicy
                  - iam:GetInstanceProfile
                  - iam:ListAttachedRolePolicies
                  - iam:GetRole
                  - iam:PassRole
                  - iam:PutRolePolicy
                  - iam:RemoveRoleFromInstanceProfile
                  - rds:AddTagsToResource
                  - rds:CreateDBInstance
                  - rds:CreateDBSubnetGroup
                  - rds:DeleteDBInstance
                  - rds:DeleteDBSubnetGroup
                  - rds:DescribeDBInstances
                  - rds:DescribeDBSnapshots
                  - rds:DescribeDBSubnetGroups
                  - rds:ListTagsForResource
                  - rds:ModifyDBSubnetGroup
                  - route53:ChangeResourceRecordSets
                  - route53:GetChange
                  - route53:ListHostedZones
                  - s3:CreateBucket
                  - s3:DeleteBucket
                  - ssm:ListCommands
                  - ssm:SendCommand
                Effect: Allow
                Resource: "*"
              - Action:
                  - s3:GetBucketAcl
                  - s3:GetBucketTagging
                  - s3:GetBucketVersioning
                  - s3:GetObject
                  - s3:GetObjectAcl
                  - s3:GetObjectTagging
                  - s3:ListBucket
                  - s3:ListBucketByTags
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:PutObjectTagging
                  - s3:PutObjectVersionTagging
                Effect: Allow
                Resource:
                  - !GetAtt ConfigBucket.Arn
                  - !Join ['', [!GetAtt ConfigBucket.Arn, '/*']]
                  - !GetAtt DiagnosticsBucket.Arn
                  - !Join ['', [!GetAtt DiagnosticsBucket.Arn, '/*']]
                  - !GetAtt TemplatesBucket.Arn
                  - !Join ['', [!GetAtt TemplatesBucket.Arn, '/*']]
                  - !GetAtt StackLogsBucket.Arn
                  - !Join ['', [!GetAtt StackLogsBucket.Arn, '/*']]
              - Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  - !GetAtt LogGroup.Arn
  ConfigUpdaterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com, lambda.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Path: /
      Policies:
        - PolicyName: ForgeConfigUpdaterPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - ecs:UpdateService
                  - logs:PutLogEvents
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                Effect: Allow
                Resource: "*"
  ConfigUpdaterPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:invokeFunction'
      FunctionName: !Ref ConfigUpdaterLambda
      Principal: s3.amazonaws.com
      SourceArn: !GetAtt ConfigBucket.Arn
  ConfigUpdaterLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: !Sub |
          import boto3
          def handler(event, context):
            ecs = boto3.client('ecs')
            result = ecs.update_service(cluster='${ECSCluster}', service='${Service}', forceNewDeployment=True)
            return result['ResponseMetadata']['HTTPStatusCode']
      Handler: index.handler
      Role: !GetAtt ConfigUpdaterRole.Arn
      Runtime: python3.6
Outputs:
  ServiceURL:
    Description: The URL to access Forge
    Value: !If
      - UseCustomDnsName
      - !Sub
        - "${HTTP}://${CustomDNSName}"
        - HTTP: !If [DoSSL, https, http]
          CustomDNSName: !Ref CustomDnsName
      - !If
        - UseHostedZone
        - !Sub
          - "${HTTP}://${LBCName}"
          - HTTP: !If [DoSSL, https, http]
            LBCName: !Ref LoadBalancerCname
        - !Sub
          - "${HTTP}://${LoadBalancerDNSName}"
          - HTTP: !If [DoSSL, https, http]
            LoadBalancerDNSName: !GetAtt LoadBalancer.DNSName
  LoadBalancerURL:
    Description: The Load Balancer URL
    Value: !Sub
      - "${HTTP}://${LoadBalancerDNSName}"
      - HTTP: !If [DoSSL, https, http]
        LoadBalancerDNSName: !GetAtt LoadBalancer.DNSName
  SGname:
    Description: The name of the SecurityGroup
    Value: !Ref SecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-SGname"
  ClusterName:
    Description: The name of the ECS Cluster
    Value: !Ref ECSCluster
  ConfigUpdaterLambdaArn:
    Description: The ARN for the Lambda used to update the ECS service on app config updates
    Value: !GetAtt ConfigUpdaterLambda.Arn
